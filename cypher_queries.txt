
# return actor node and his movies
 

================================================================================= 
// What is related, and how
MATCH (a)-[r]->(b)
WHERE labels(a) <> [] AND labels(b) <> []
RETURN DISTINCT head(labels(a)) AS This, type(r) as To, head(labels(b)) AS That
LIMIT 10
================================================================================= 


/********
answer:
MATCH p=(a:actor {name:'Brad Pitt'})-[r:ACTED_IN]->(m:movie)<-[r3:ACTED_IN]-(b)
RETURN a,b,count(b.name) ORDER by count(b.name) DESC LIMIT 30
**********/

MATCH (a:actor {name:'Brad Pitt'})-[r1:ACTED_IN]->(m1:movie)<-[r2:ACTED_IN]-(c:actor)
-[r3:ACTED_IN]->(m2:movie)<-[r4:ACTED_IN]-(b:actor)
RETURN a,b,count(b.name) ORDER by count(b.name) DESC LIMIT 30

*******************************************************************************
answer AMAMA: xy count
MATCH (a:actor {name:'Brad Pitt'})-[r1:ACTED_IN]->(m1:movie)<-[r2:ACTED_IN]-(c:actor)
-[r3:ACTED_IN]->(m2:movie)<-[r4:ACTED_IN]-(b:actor)
RETURN b,count(b.name) ORDER BY count(b.name) DESC LIMIT 20
*******************************************************************************

*******************************************************************************
answer AMA: xy count
MATCH (a:actor {name:'Brad Pitt'})-[r1:ACTED_IN]->(m1:movie)<-[r2:ACTED_IN]-(b:actor)
RETURN b,count(b.name) ORDER BY count(b.name) DESC LIMIT 200
*******************************************************************************

*******************************************************************************
Answer AMA:  xx count
MATCH (a:actor {name:'Brad Pitt'})-[ACTED_IN]->(m) 
MATCH (m)<-[r:ACTED_IN]-(a) 
RETURN a,count(a.name) ORDER BY count(a.name)
*******************************************************************************

*******************************************************************************
Answer AMA: yy count
MATCH (a:actor {name:'Brad Pitt'})-[r1:ACTED_IN]->(m1:movie)<-[r2:ACTED_IN]-(b:actor)
MATCH (b)-[r3:ACTED_IN]->(m)
MATCH (m)<-[r4:ACTED_IN]-(b)
RETURN b,count(b.name) ORDER BY count(b.name) DESC LIMIT 20

*******************************************************************************

MATCH (a:actor {name:'Brad Pitt'})-[r3:ACTED_IN]->(m)<-[r4:ACTED_IN]-(b:actor) 
WITH count(r3) as brad_movies, count(r4) as rest_movies 
return brad_movies, rest_movies 

MATCH (a:actor {name:'Brad Pitt'})-[r:ACTED_IN]->(m:movie)
MATCH (b:actor) WHERE NOT (b.name='Brad Pitt')
MATCH (b)-[r2:ACTED_IN]->(m)


MATCH p =(a)-[:ACTED_IN*1..2]-(b)
RETURN p, length(p);

====
MATCH (a:actor {name:'Brad Pitt'})-[r:ACTED_IN]->(m:movie)
MATCH (b:actor) WHERE NOT (b.name='Brad Pitt')
MATCH (b)-[r2:ACTED_IN]->(m)
MATCH p =(a)-[:ACTED_IN*2]-(b)
RETURN p,count(p) as count ORDER BY count DESC;


==
MATCH (a:actor {name:'Brad Pitt'})-[r3:ACTED_IN]->(m)<-[r4:ACTED_IN]-(b:actor {name:'George Clooney'}) RETURN a,b,r3,r4,m 
==

===
MATCH (a:actor {name:'Brad Pitt'})-[r:ACTED_IN]->(m:movie)
MATCH (b:actor) WHERE NOT (b.name='Brad Pitt')
MATCH (b)-[r2:ACTED_IN]->(m)
MATCH p =(a)-[:ACTED_IN*1..2]-(b)
RETURN count(p) ORDER BY count(p) DESC;

====


MATCH p =(:actor { name: "Brad Pitt" })-[:ACTED_IN*1..2]-(b:actor)
RETURN p, length(p);



START a = node:index(name="Brad Pitt")
MATCH a-[r1:ACTED_IN]->(m:movie)<-[r2:ACTED_IN]-(b:movie)
RETURN b,count(*) ORDER BY count(*) DESC


START a=node({A}), d=node({D})
MATCH p=a-[r:ACTIVATES*..]-d
WHERE has(r.temperature) and r.temperature='50'
RETURN p;


MATCH (b:actor) WHERE NOT (b.name='Brad Pitt')
MATCH (b)-[r2:ACTED_IN]->(m)

********************************************************************
answer: xx
MATCH (a:actor {name:'Brad Pitt'})-[ACTED_IN]->(m)
MATCH (m)<-[r:ACTED_IN]-(a) 
RETURN a,m,r
********************************************************************


tesing 27 april
MATCH (a:actor {name:'Hitanshu Arora'})-[r1:ACTED_IN]->(m:movie) 
MATCH (m)<-[r2:ACTED_IN]-(a)-[r3:ACTED_IN]->(m2:movie) 
RETURN a,m,m2

AMAMA - xy
MATCH (a:actor {name:'Hitanshu Arora'})-[r1:ACTED_IN]->(m:movie) 
MATCH (m)<-[r2:ACTED_IN]-(a1:actor)
MATCH (a1)-[r3:ACTED_IN]->(m2:movie)
MATCH (m2)<-[r4:ACTED_IN]-(a2:actor)
WHERE a2.name <> 'Hitanshu Arora'
return a2, count(a2.name) ORDER BY count(a2.name) DESC

AMAMA - yy
MATCH (a:actor {name:'Hitanshu Arora'})-[r1:ACTED_IN]->(m:movie) 
MATCH (m)<-[r2:ACTED_IN]-(a1:actor)
MATCH (a1)-[r3:ACTED_IN]->(m2:movie)
MATCH (m2)<-[r4:ACTED_IN]-(a2:actor)
WHERE a2.name <> 'Hitanshu Arora'
MATCH (a2:actor)-[r5:ACTED_IN]->(m3:movie)
MATCH (m3)<-[r6:ACTED_IN]-(a3:actor)
MATCH (a3)-[r7:ACTED_IN]->(m4:movie)
MATCH (m4)<-[r8:ACTED_IN]-(a2)
return a2,count(a2.name) ORDER BY count(a2.name) DESC